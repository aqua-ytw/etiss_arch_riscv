import "rv_base/RISCVBase.core_desc"
import "rv_base/RV32I.core_desc"
import "rv_base/RVA.core_desc"

InstructionSet tum_ret extends RISCVBase {
    architectural_state {
        signed<32> ETISS_RETURNCODE_NOERROR = 0;
        signed<32> ETISS_RETURNCODE_GENERALERROR = -1;
        signed<32> ETISS_RETURNCODE_RELOADBLOCKS = -2;
        signed<32> ETISS_RETURNCODE_RELOADCURRENTBLOCK = -3;
        signed<32> ETISS_RETURNCODE_DBUS_READ_ERROR = -5;
        signed<32> ETISS_RETURNCODE_DBUS_WRITE_ERROR = -6;
        signed<32> ETISS_RETURNCODE_IBUS_READ_ERROR = -7;
        signed<32> ETISS_RETURNCODE_IBUS_WRITE_ERROR = -8;
        signed<32> ETISS_RETURNCODE_INTERRUPT = -9;
        signed<32> ETISS_RETURNCODE_RESET = -10;
        signed<32> ETISS_RETURNCODE_ILLEGALINSTRUCTION = -11;
        signed<32> ETISS_RETURNCODE_ILLEGALJUMP = -12;
        signed<32> ETISS_RETURNCODE_INSTR_PAGEFAULT = -13;
        signed<32> ETISS_RETURNCODE_LOAD_PAGEFAULT = -14;
        signed<32> ETISS_RETURNCODE_STORE_PAGEFAULT = -15;
        signed<32> ETISS_RETURNCODE_GDBNOERROR = -16;
        signed<32> ETISS_RETURNCODE_SYSCALL = -17;
        signed<32> ETISS_RETURNCODE_PAGEFAULT = -18;
        signed<32> ETISS_RETURNCODE_BREAKPOINT = -19;
        signed<32> ETISS_RETURNCODE_CPUFINISHED = 1 << 31;
        signed<32> ETISS_RETURNCODE_CPUTERMINATED = 0x80000001;
        signed<32> ETISS_RETURNCODE_JITERROR = -32;
        signed<32> ETISS_RETURNCODE_JITCOMPILATIONERROR = -33;
        signed<32> ETISS_RETURNCODE_ARCHERROR = -34;
        signed<32> ETISS_RETURNCODE_EMULATIONNOTSUPPORTED = -35;
        signed<32> ETISS_RETURNCODE_INVALIDSYSTEM = -36;
        signed<32> ETISS_RETURNCODE_TEMPORARY0 = -128;
        signed<32> ETISS_RETURNCODE_TEMPORARY1 = -129;
        signed<32> ETISS_RETURNCODE_TEMPORARY2 = -130;
        signed<32> ETISS_RETURNCODE_TEMPORARY3 = -131;
        signed<32> ETISS_RETURNCODE_TEMPORARY4 = -132;
        signed<32> ETISS_RETURNCODE_TEMPORARY5 = -133;
        signed<32> ETISS_RETURNCODE_TEMPORARY6 = -134;
        signed<32> ETISS_RETURNCODE_TEMPORARY7 = -135;
    }

    functions {
        unsigned<64> get_field(unsigned<64> reg, unsigned<64> mask) {
            return (reg & mask) / (mask & ~(mask << 1));
        }

        unsigned<64> set_field(unsigned<64> reg, unsigned<64> mask, unsigned<64> val) {
            return ((reg & ~mask) | ((val * (mask & ~(mask << 1))) & mask));
        }

        void raise(int irq, int mcause) [[ etiss_exc_entry ]] {
            unsigned<XLEN> epc = PC;
            PC = (CSR[RV_CSR_MTVEC] & ~(unsigned<XLEN>)1);
            CSR[RV_CSR_MEPC] = epc;
            CSR[RV_CSR_MCAUSE] = mcause;

            unsigned<XLEN> s = CSR[RV_CSR_MSTATUS];
            s = set_field(s, RV_MSTATUS_MPIE, get_field(s, RV_MSTATUS_MIE));
            s = set_field(s, RV_MSTATUS_MPP, PRIV);
            s = set_field(s, RV_MSTATUS_MIE, 0);
            CSR[RV_CSR_MSTATUS] = s;
            PRIV = RV_PRV_M;
        }

        void translate_exc_code(int cause) [[etiss_mem_exc_entry=MEM]] {
            int code = 0;

            if (cause == ETISS_RETURNCODE_DBUS_READ_ERROR) code = RV_CAUSE_LOAD_ACCESS;
            else if (cause == ETISS_RETURNCODE_LOAD_PAGEFAULT) code = RV_CAUSE_LOAD_PAGE_FAULT;
            else if (cause == ETISS_RETURNCODE_DBUS_WRITE_ERROR) code = RV_CAUSE_STORE_ACCESS;
            else if (cause == ETISS_RETURNCODE_STORE_PAGEFAULT) code = RV_CAUSE_STORE_PAGE_FAULT;
            else if (cause == ETISS_RETURNCODE_IBUS_READ_ERROR) code = RV_CAUSE_FETCH_ACCESS;
            else code = RV_CAUSE_ILLEGAL_INSTRUCTION;

            raise(0, code);
        }
    }

    instructions {
        MRET [[no_cont]] {
            encoding: 7'b0011000 :: 5'b00010 :: 5'b00000 :: 3'b000 :: 5'b00000 :: 7'b1110011;
            behavior: {
                PC = CSR[RV_CSR_MEPC];

                unsigned<XLEN> s = CSR[RV_CSR_MSTATUS];

                unsigned<XLEN> prev_prv = get_field(s, RV_MSTATUS_MPP);

                if (prev_prv != RV_PRV_M)
                    s = set_field(s, RV_MSTATUS_MPRV, 0);

                s = set_field(s, RV_MSTATUS_MIE, get_field(s, RV_MSTATUS_MPIE));
                s = set_field(s, RV_MSTATUS_MPIE, 1);
                s = set_field(s, RV_MSTATUS_MPP, RV_PRV_M);

                CSR[RV_CSR_MSTATUS] = s;
                PRIV = prev_prv;
            }
        }
    }
}

InstructionSet tum_csr extends Zicsr {
    functions {
        extern unsigned<64> etiss_get_cycles() [[ etiss_needs_arch ]];
        extern unsigned<64> etiss_get_time();
        extern unsigned<64> etiss_get_instret() [[ etiss_needs_arch ]];

        unsigned<XLEN> csr_read(unsigned int csr) {
            if (csr == RV_CSR_FFLAGS) return CSR[RV_CSR_FCSR] & 0x1F;
            if (csr == RV_CSR_FRM) return (CSR[RV_CSR_FCSR] >> 5) & 0x07;
            if (csr == RV_CSR_CYCLE) return etiss_get_cycles();
            if (csr == RV_CSR_CYCLEH) return etiss_get_cycles() >> 32;
            if (csr == RV_CSR_TIME) return etiss_get_time();
            if (csr == RV_CSR_TIMEH) return etiss_get_time() >> 32;
            if (csr == RV_CSR_INSTRET) return etiss_get_instret();
            if (csr == RV_CSR_INSTRETH) return etiss_get_instret() >> 32;

            return CSR[csr];
        }

        void csr_write(unsigned int csr, unsigned<XLEN> val) {
            if (csr == RV_CSR_FFLAGS) CSR[RV_CSR_FCSR] = (CSR[RV_CSR_FCSR] & (0x07 << 5)) | (val & 0x1F);
            else if (csr == RV_CSR_FRM) CSR[RV_CSR_FCSR] = ((val & 0x07) << 5) | (CSR[RV_CSR_FCSR] & 0x1F);
            else if (csr == RV_CSR_FCSR) CSR[RV_CSR_FCSR] = val & 0xFF;
            else if (csr == RV_CSR_MSTATUS) CSR[RV_CSR_MSTATUS] = val & 0x00000088;
            else if (csr != RV_CSR_MISA) CSR[csr] = val;
        }
    }

    instructions {
        CSRRW {
            encoding: csr[11:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1110011;
            assembly:"{name(rd)}, {csr}, {name(rs1)}";
            behavior: {
                unsigned<XLEN> xrs1 = X[rs1 % RFS];
                if ((rd % RFS) != 0) {
                    unsigned<XLEN> xrd = csr_read(csr);
                    csr_write(csr, xrs1);
                    // make sure Xrd is updated once CSR write succeeds
                    X[rd % RFS] = xrd;
                } else {
                    csr_write(csr, xrs1);
                }
            }
        }

        CSRRS {
            encoding: csr[11:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b1110011;
            assembly:"{name(rd)}, {csr}, {name(rs1)}";
            behavior: {
                unsigned<XLEN> xrd = csr_read(csr);
                unsigned<XLEN> xrs1 = X[rs1 % RFS];
                if (rs1 != 0) csr_write(csr, xrd | xrs1);
                if ((rd % RFS) != 0) X[rd % RFS] = xrd;
            }
        }

        CSRRC {
            encoding: csr[11:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b1110011;
            assembly:"{name(rd)}, {csr}, {name(rs1)}";
            behavior: {
                unsigned<XLEN> xrd = csr_read(csr);
                unsigned<XLEN> xrs1 = X[rs1 % RFS];
                if (rs1 != 0) csr_write(csr, xrd & ~xrs1);
                if ((rd % RFS) != 0) X[rd % RFS] = xrd;
            }
        }

        CSRRWI {
            encoding: csr[11:0] :: zimm[4:0] :: 3'b101 :: rd[4:0] :: 7'b1110011;
            assembly:"{name(rd)}, {csr}, {zimm:#0x}";
            behavior: {
                unsigned<XLEN> xrd = csr_read(csr);
                csr_write(csr, (unsigned<XLEN>)zimm);
                if ((rd % RFS) != 0) X[rd % RFS] = xrd;
            }
        }

        CSRRSI {
            encoding: csr[11:0] :: zimm[4:0] :: 3'b110 :: rd[4:0] :: 7'b1110011;
            assembly:"{name(rd)}, {csr}, {zimm:#0x}";
            behavior: {
                unsigned<XLEN> xrd = csr_read(csr);
                if (zimm != 0) csr_write(csr, xrd | (unsigned<XLEN>)zimm);
                if ((rd % RFS) != 0) X[rd % RFS] = xrd;
            }
        }

        CSRRCI {
            encoding: csr[11:0] :: zimm[4:0] :: 3'b111 :: rd[4:0] :: 7'b1110011;
            assembly:"{name(rd)}, {csr}, {zimm:#0x}";
            behavior: {
                unsigned<XLEN> xrd = csr_read(csr);
                if (zimm != 0) csr_write(csr, xrd & ~((unsigned<XLEN>)zimm));
                if ((rd % RFS) != 0) X[rd % RFS] = xrd;
            }
        }
    }
}

InstructionSet tum_rva extends RV32A {
    architectural_state {
        register unsigned<XLEN> RES_ADDR = -1;
    }

    instructions [[ enable(CSR[RV_CSR_MISA] & (1 << 0)) ]] {
        LRW {
            encoding: 5'b00010 :: aq[0:0] :: rl[0:0]  :: 5'b00000 :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b0101111;
            assembly: "{name(rd)}, {name(rs1)}, {name(aq)}, {name(rl)}";
            behavior: {
                unsigned<XLEN> offs = X[rs1 % RFS];
                signed<32> res = (signed<32>)MEM[offs];
                RES_ADDR = offs;
                if (rd) X[rd % RFS] = (signed<XLEN>)res;
            }
        }

        SCW {
            encoding: 5'b00011 :: aq[0:0] :: rl[0:0] :: rs2[4:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b0101111;
            assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}, {name(aq)}, {name(rl)}";
            behavior: {
                unsigned<XLEN> offs = X[rs1 % RFS];
                if (RES_ADDR == offs) MEM[offs] = (signed<32>)X[rs2 % RFS];
                if (rd) X[rd % RFS] = RES_ADDR != offs;
                RES_ADDR = -1;
            }
        }
    }
}

InstructionSet tum_rva64 extends tum_rva {
    instructions [[ enable(CSR[RV_CSR_MISA] & (1 << 0)) ]] {
        LRD {
            encoding: 5'b00010 :: aq[0:0] :: rl[0:0]  :: 5'b00000 :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101111;
            assembly: "{name(rd)}, {name(rs1)}, {name(aq)}, {name(rl)}";
            behavior: {
                unsigned<XLEN> offs = X[rs1 % RFS];
                signed<64> res = (signed<64>)MEM[offs];
                RES_ADDR = offs;
                if (rd) X[rd % RFS] = (signed<XLEN>)res;
            }
        }

        SCD {
            encoding: 5'b00011 :: aq[0:0] :: rl[0:0] :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101111;
            assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}, {name(aq)}, {name(rl)}";
            behavior: {
                unsigned<XLEN> offs = X[rs1 % RFS];
                if (RES_ADDR == offs) MEM[offs] = (signed<64>)X[rs2 % RFS];
                if (rd) X[rd % RFS] = RES_ADDR != offs;
                RES_ADDR = -1;
            }
        }
    }
}

InstructionSet tum_semihosting extends RV32I {
    instructions {
        EBREAK [[no_cont]] [[cond]] {
            encoding: 0b000000000001 :: 5'b00000 :: 3'b000 :: 5'b00000 :: 7'b1110011;
            behavior: {
                if (etiss_semihost_enabled()) {
                    unsigned<32> pre    = (unsigned<32>)MEM[PC - 4];
                    unsigned<32> ebreak = (unsigned<32>)MEM[PC + 0];
                    unsigned<32> post   = (unsigned<32>)MEM[PC + 4];
                    if ( pre    == 0x01f01013 // slli x0, x0, 0x1f   Entry NOP
                      && ebreak == 0x00100073 // ebreak              Break to debugger
                      && post   == 0x40705013 // srai x0, x0, 7      NOP encoding the semihosting call number 7
                    ) {
                    unsigned<XLEN> operation = X[10];
                    unsigned<XLEN> parameter = X[11];
                    X[10] = (signed<XLEN>)etiss_semihost(XLEN, operation, parameter);
                    } else {
                        raise(0, RV_CAUSE_BREAKPOINT);
                    }
                } else {
                    raise(0, RV_CAUSE_BREAKPOINT);
                }
            }
        }
    }

    functions {
        extern unsigned<8> etiss_semihost_enabled();
        extern signed<64> etiss_semihost(unsigned<32> XLEN, unsigned<64> operation, unsigned<64> parameter) [[etiss_needs_arch]];
    }
}
